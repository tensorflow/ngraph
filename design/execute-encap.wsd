@startuml 
hide footbox
title Execute NGEncapsulate Op

skinparam backgroundColor #EEEEFFFF
skinparam handwritten false

skinparam sequence {
	ArrowColor DeepSkyBlue
	ActorBorderColor DeepSkyBlue
	LifeLineBorderColor blue
	LifeLineBackgroundColor #A9DCDF
	
	ParticipantBorderColor DeepSkyBlue
	ParticipantBackgroundColor DodgerBlue
	ParticipantFontName Impact
	ParticipantFontSize 17
	ParticipantFontColor #A9DCDF
	
	ActorBackgroundColor aqua
	ActorFontColor DeepSkyBlue
	ActorFontSize 17
	ActorFontName Aapex
}

 == Multiply Op Execution (step 1) ==

TFExecutor -> MultiplyOp : Compute(OpContex* ctx)
activate MultiplyOp

MultiplyOp -> MultiplyOp : LookupCache()
MultiplyOp -> Executor : GetPipelinedTensors()
MultiplyOp -> OpContext : Lookup()\nObject doesn't exist. So need to create
MultiplyOp -> NGraphPrefetchSharedResouce ** : new
MultiplyOp -> Executor : GetPipelinedTensors(io_tensor_bundle)\nGet it again for the next iteration
MultiplyOp -> NGraphPrefetchSharedResouce : AddNextIoTensorsForDeviceTransfer(io_tensor_bundle)

MultiplyOp -> NGTensor : write(host_src_ptr, ...)
MultiplyOp -> NgExecutable : call(output_tensors, input_tensors)
MultiplyOp -> NgTensor : read(host_dst_ptr, ...) 

deactivate MultiplyOp

 == Multiply Op Execution (step 2) ==
TFExecutor -> MultiplyOp : Compute(OpContex* ctx)
activate MultiplyOp

MultiplyOp -> MultiplyOp : LookupCache()
MultiplyOp -> Executor : GetPipelinedTensors()
MultiplyOp -> OpContext : Lookup()\nObject does exist. So retrieve it
MultiplyOp -> NGraphPrefetchSharedResouce : GetNextIoTensorsReadyForDeviceExecution(ng_io_tensors_ready)
MultiplyOp -> NGraphPrefetchSharedResouce : AddNextIoTensorsForDeviceTransfer(io_tensor_bundle)

MultiplyOp -> NgExecutable : call(output_tensors, input_tensors)
MultiplyOp -> NgTensor : read(host_dst_ptr, ...) 

deactivate MultiplyOp

@enduml
